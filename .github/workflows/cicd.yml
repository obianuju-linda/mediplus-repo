name: CI/CD Pipeline ðŸš€

on:
  push:
    branches:
      - main # This will trigger the pipeline when changes are pushed to the main branch.

jobs:
  build-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1 # Specify your AWS region.

    - name: Login to AWS ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 242201301803.dkr.ecr.us-east-1.amazonaws.com

    - name: Build and push Docker image to ECR
      run: |
        # Define ECR URL
        DOCKER_REPO_URL=242201301803.dkr.ecr.us-east-1.amazonaws.com/mediplus-repo

        # Build image (default tag is :latest)
        docker build -t mediplus-repo .
        
        # Tag the image correctly for ECR (Fixed spacing and repository name)
        docker tag mediplus-repo:latest $DOCKER_REPO_URL:${{ github.run_number }}
        
        # Push the image with the unique run number tag
        docker push $DOCKER_REPO_URL:${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest 
    needs: build-push 
    
    steps:
    - name: check my ssh key & deploy
      run: |
        # Setup variables
        SSH_USER=ubuntu
        SSH_HOST=34.203.248.57
        ECR_REPO_URL=242201301803.dkr.ecr.us-east-1.amazonaws.com/mediplus-repo
        IMAGE_TAG=${{ github.run_number }}
        SSH_CMD="ssh -o StrictHostKeyChecking=no -i Dockerhost.pem $SSH_USER@$SSH_HOST"

        # Setting up SSH key
        echo "${{ secrets.SSH_KEY }}" > Dockerhost.pem
        chmod 600 Dockerhost.pem
        
        # 1. Check existing containers
        $SSH_CMD "docker ps"
        $SSH_CMD "hostnamectl"

        # 2. Login to ECR on the remote host (CRITICAL FIX: Re-added this required step)
        $SSH_CMD "aws ecr get-login-password --region us-east-1 | docker login -u AWS --password-stdin 242201301803.dkr.ecr.us-east-1.amazonaws.com"
        
        # 3. Pull the image using the unique run number tag
        $SSH_CMD "docker pull $ECR_REPO_URL:$IMAGE_TAG"

        # 4. Stop and Remove old container instance
        $SSH_CMD "docker rm -f mediplus-repo"
        
        # 5. Run the new container (Fixed trailing quote and used unique tag)
        $SSH_CMD "docker run -d -p 80:80 --name mediplus-repo $ECR_REPO_URL:$IMAGE_TAG"